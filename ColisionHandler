using System;
using UnityEngine;
using UnityEngine.SceneManagement;
public class ColisionHandler : MonoBehaviour
{
    [SerializeField] float levelLoadDelay = 5f;
    [SerializeField] AudioClip crashSound;
    [SerializeField] AudioClip finishSound;
    [SerializeField] ParticleSystem crashParticles;
    [SerializeField] ParticleSystem finishParticles;
    AudioSource audioSource;
    bool isTransitioning = false;
    private void Start()
    {
        audioSource = GetComponent<AudioSource>();
    }
    private void OnCollisionEnter(Collision other)
    {
        if (isTransitioning) return;

        switch (other.gameObject.tag)
        {
            case "Friendly":
                Debug.Log("Everything is looking good!");
                break;
            case "Finish":
                StartSuccesSequence();
                break;
            default:
                StartCrashSequence();
                break;
        }
    }
    void StartSuccesSequence()
{
    isTransitioning = true;
    audioSource.Stop();
    Debug.Log("You finished the level");
    audioSource.PlayOneShot(finishSound);
    finishParticles.Play();
    Movement movement = GetComponent<Movement>();
    AudioSource[] audioSources = movement.GetComponents<AudioSource>();
    foreach (AudioSource source in audioSources)
    {
        if (source != audioSource)
        {
            source.Stop();
        }
    }
    
    movement.enabled = false;
    Invoke("LoadNextLevel", levelLoadDelay);
}
    void StartCrashSequence()
{
    isTransitioning = true;
    audioSource.Stop();
    Debug.Log("You crashed!");
    audioSource.PlayOneShot(crashSound);
    crashParticles.Play();
    Movement movement = GetComponent<Movement>();
    AudioSource[] audioSources = movement.GetComponents<AudioSource>();
    foreach (AudioSource source in audioSources)
    {
        if (source != audioSource)
        {
            source.Stop();
        }
    }    
    movement.enabled = false;
    Invoke("ReloadLevel", levelLoadDelay);
}
    void LoadNextLevel()
    {
        int currentScene = SceneManager.GetActiveScene().buildIndex;
        int nextScene = currentScene + 1;
        if (nextScene == SceneManager.sceneCountInBuildSettings)
        {
            nextScene = 0;
        }
        SceneManager.LoadScene(nextScene);
    }
    void ReloadLevel()
    {
        int currentScene = SceneManager.GetActiveScene().buildIndex;
        SceneManager.LoadScene(currentScene);
    }
}
