using UnityEngine;
using UnityEngine.InputSystem;
public class Movement : MonoBehaviour
{
    [SerializeField] private InputAction thrust;
    [SerializeField] private InputAction rotation;
    [SerializeField] private float thrustForce = 100f;
    [SerializeField] private float rotationSpeed = 50f;
    [SerializeField] private float maxAngularSpeed = 2f;
    [SerializeField] private bool usePhysicsRotation = true;
    [SerializeField] private float rotationLerpSpeed = 5f;
    private Rigidbody rb;
    AudioSource audioSource;
    private bool isRotating = false;
    private float currentRotationSpeed = 0f;
    private void Start()
    {
        rb = GetComponent<Rigidbody>();
        rb.constraints = RigidbodyConstraints.FreezePositionZ;
        rb.collisionDetectionMode = CollisionDetectionMode.Continuous;
        audioSource = GetComponent<AudioSource>();
    }
    private void OnEnable()
    {
        thrust.Enable();
        rotation.Enable();
    }
    private void OnDisable()
    {
        thrust.Disable();
        rotation.Disable();
    }
    private void FixedUpdate()
    {
        ProcessThrust();
        ProcessRotation();
    }
    [SerializeField] private float audioFadeSpeed = 2f;
    private float targetVolume = 0f;

    private void ProcessThrust()
    {
        if (thrust.IsPressed())
        {
            rb.AddRelativeForce(Vector3.up * thrustForce * Time.fixedDeltaTime);
            targetVolume = 0.5f;
            if(!audioSource.isPlaying)
            {
                audioSource.Play();
            }
        }
        else
        {
            targetVolume = 0f;
        }
        audioSource.volume = Mathf.Lerp(audioSource.volume, targetVolume, Time.fixedDeltaTime * audioFadeSpeed);
        if (audioSource.volume < 0.01f && !thrust.IsPressed())
        {
            audioSource.Stop();
        }
    }
    private void ProcessRotation()
    {
        float rotationInput = rotation.ReadValue<float>();

        if (rotationInput != 0)
        {
            isRotating = true;
            currentRotationSpeed = Mathf.Lerp(currentRotationSpeed, rotationInput * rotationSpeed, Time.fixedDeltaTime * rotationLerpSpeed);
            if (usePhysicsRotation)
            {
                rb.angularDamping = 5f;
                rb.AddTorque(Vector3.back * currentRotationSpeed * Time.fixedDeltaTime);
            }
            else
            {
                transform.Rotate(Vector3.back * currentRotationSpeed * Time.fixedDeltaTime);
            }
        }
        else if (isRotating)
        {
            rb.angularVelocity = Vector3.zero;
            rb.angularDamping = 0.05f;
            isRotating = false;
        }
        rb.angularVelocity = Vector3.ClampMagnitude(rb.angularVelocity, maxAngularSpeed);
    }
    private void OnCollisionStay(Collision collision)
    {
        if (collision.gameObject.CompareTag("Obstacle"))
        {
            rb.angularVelocity *= 0.5f;
        }
    }
}
